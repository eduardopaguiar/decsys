{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DECSYS Survey Platform \u00b6 The DECSYS Survey Platform aims to be a flexible cross-platform web-based survey platform that particularly makes it easy to load custom question response components. What's here? This documentation site contains general information about the Survey Platform, including: the technology behind it the state of development how it works Over time it is likely to contain User Guide style documentation in addition to the current technical documentation. Where else can I find information? There are also other places you can find specific information about aspects of the wider DECSYS Project: Running or Building the Survey Platform About the DECSYS Project Writing Response Components for the Platform Using the Ratings Scales components in other projects","title":"Home"},{"location":"#decsys-survey-platform","text":"The DECSYS Survey Platform aims to be a flexible cross-platform web-based survey platform that particularly makes it easy to load custom question response components. What's here? This documentation site contains general information about the Survey Platform, including: the technology behind it the state of development how it works Over time it is likely to contain User Guide style documentation in addition to the current technical documentation. Where else can I find information? There are also other places you can find specific information about aspects of the wider DECSYS Project: Running or Building the Survey Platform About the DECSYS Project Writing Response Components for the Platform Using the Ratings Scales components in other projects","title":"DECSYS Survey Platform"},{"location":"platform-support/","text":"There are two aspects to the supported platforms for the Survey Platform: Supported platforms for running the application (as an Admin ) Supported web browsers for using the application (as an Admin or a Participant ) Running the application \u00b6 Tested and supported 64-bit Windows 10 Anniversary Update (1607) or newer. Should work Realistically, you should be able to run the application anywhere .NET Core 3.1 or newer is available . At minimum this includes: Windows 7 (SP1 or newer) 8.1 10 (1607 or newer) macOS 10.12 \"Sierra\" or newer Linux - latest Ubuntu and Debian Using the application \u00b6 Because the Platform is a web app, platform support is based on web browser rather than operating system. The Admin user interface is only designed for use on Desktop Computers. The Participant user interface should work on smartphones but is not officially supported. Tested and supported Microsoft Edge Classic - Windows 10 (1607 or newer) Google Chrome (last 2 versions) - Windows, macOS, Linux Should work Any \"evergreen\" web browser Explicitly with support for directly loading ES Modules <script type=\"module\"> Unsupported Internet Explorer (any) Any browser that doesn't support directly loading ES Modules <script type=\"module\"> Browser Test Results \u00b6 OS Edge Classic Chrome Firefox Safari Samsung Internet Windows 10 \u2714 \u2714 \u2714 - - Windows 7 - \u2714 \u2714 - - macOS 10 - \u2714 not tested \u2714 - Android 7 \u26a0 no Ellipse touch support \u2714 \u2714 - \u2714 iOS 12 \u26a0 no Ellipse touch support \u2714 \u2714 \u2714 -","title":"Supported Platforms"},{"location":"platform-support/#running-the-application","text":"Tested and supported 64-bit Windows 10 Anniversary Update (1607) or newer. Should work Realistically, you should be able to run the application anywhere .NET Core 3.1 or newer is available . At minimum this includes: Windows 7 (SP1 or newer) 8.1 10 (1607 or newer) macOS 10.12 \"Sierra\" or newer Linux - latest Ubuntu and Debian","title":"Running the application"},{"location":"platform-support/#using-the-application","text":"Because the Platform is a web app, platform support is based on web browser rather than operating system. The Admin user interface is only designed for use on Desktop Computers. The Participant user interface should work on smartphones but is not officially supported. Tested and supported Microsoft Edge Classic - Windows 10 (1607 or newer) Google Chrome (last 2 versions) - Windows, macOS, Linux Should work Any \"evergreen\" web browser Explicitly with support for directly loading ES Modules <script type=\"module\"> Unsupported Internet Explorer (any) Any browser that doesn't support directly loading ES Modules <script type=\"module\">","title":"Using the application"},{"location":"platform-support/#browser-test-results","text":"OS Edge Classic Chrome Firefox Safari Samsung Internet Windows 10 \u2714 \u2714 \u2714 - - Windows 7 - \u2714 \u2714 - - macOS 10 - \u2714 not tested \u2714 - Android 7 \u26a0 no Ellipse touch support \u2714 \u2714 - \u2714 iOS 12 \u26a0 no Ellipse touch support \u2714 \u2714 \u2714 -","title":"Browser Test Results"},{"location":"technical/development-state/","text":"The Survey Platform, and the various pieces that come together to make it what it is, are considered version 1.0 . That is to say, they are feature complete, and stable, for the first version. There are planned future features and extended capabilities for the platform that will follow in later versions, but you can use it today, and there's enough in it to be useful. The first major example is that today, in 1.0 , you can run the application locally, as a sole Admin , and have users on your local network participate in your Surveys . To make this easy, the application runs everything it needs in a single process. In future, it will be possible to optionally connect to an external database server, or to host the backend and frontend on different machines - perhaps in containers.","title":"State of Development"},{"location":"technical/source-code/","text":"Info All the Code for every aspect of the DECSYS Project can be found on GitHub Repository Description decsys The Survey Platform itself. rating-scales The Rating Scales library. Contains reusable Ellipse and Discrete Scale React Components. component-boilerplate A Boilerplate to provide a starting point for writing a Response Component for the Survey Platform. Also home to detailed documentation and guides for writing Response Components. param-types A utility package for specifying Response Component Parameter details. Useful when authoring Respone Components. iaa Various implementations for applying the Type 1 Interval Agreement Approach to interval data. The JavaScript implementation is used by the Ellipse Response Component for statistical analysis of results. confirmation-component discrete-component ellipse-component freetext-component All repositories for Response Components that come bunled with the Survey Platform.","title":"Source Code"},{"location":"technical/stack/","text":"The Survey Platform application consists of the following parts: A NoSQL database A REST API backend application A Client-side frontend application Dynamically loaded external Response Components At this time, all of these parts are run in-process by the backend application. Database \u00b6 The Database used is LiteDB , which is an embedded NoSQL database for .NET Standard. It uses the MongoDB API and is similarly featured to Mongo, so should be accessible for people used to working with NoSQL. It's embedded, allowing the single-process design to simplify zero-config running of the Survey Platform for Admins. It's for .NET, for which the backend application (the host process) is written. Backend \u00b6 The Backend application is an ASP.NET Core 3.1 MVC REST API. It's .NET Core so it's cross-platform for Linux, macOS and Windows. It's self-hosting - it doesn't require a reverse proxy in front of it. It's capable of hosting different content at different routes in the case of the Survey Platform: there are some custom routes which bypass the MVC framework (e.g. /version ) there are routes to the Client Side application there are routes to MVC controllers (e.g. /api/... ) The above points allow keeping with the single-process design. Users can just run the backend and everything comes up. The backend can be published as a platform binary which can run anywhere the platform ( .NET Core ) runtime is available. It can also be published as a native executable binary for supported platforms (e.g. decsys.exe for Windows). Frontend \u00b6 The Frontend application is a Client Side React Single Page Application. It's pure JavaScript It is however modern ECMAScript, so is transpiled using Babel. It uses a very popular component driven framework: React This should be beneficial for developer accessibility It really helped enable the ability to dynamically load external components It's hosted by the Backend application process. Components \u00b6 External Response Components are written as React Components, with some additional metadata. Refer to the component-boilerplate wiki for detailed information on the structure of Response Components and how to write them. They're React , the same as the Frontend app. They use Styled Components so they can be bundled into a single JavaScript file, but still be styled. They're modern ECMAScript, using the ES Modules standard They're discovered and served by the Backend app at runtime You can drop new components into the components/ folder locally, and only a page refresh is required to load them. They're loaded by the frontend as ES Modules at runtime. NoSQL allows us to store response data with flexible schema defined by the Response Components, not the Platform. React allows Components to use PropTypes to define Parameter and Response schema that the Platform can validate or interact with (e.g. providing a rich editor UI).","title":"Tech stack"},{"location":"technical/stack/#database","text":"The Database used is LiteDB , which is an embedded NoSQL database for .NET Standard. It uses the MongoDB API and is similarly featured to Mongo, so should be accessible for people used to working with NoSQL. It's embedded, allowing the single-process design to simplify zero-config running of the Survey Platform for Admins. It's for .NET, for which the backend application (the host process) is written.","title":"Database"},{"location":"technical/stack/#backend","text":"The Backend application is an ASP.NET Core 3.1 MVC REST API. It's .NET Core so it's cross-platform for Linux, macOS and Windows. It's self-hosting - it doesn't require a reverse proxy in front of it. It's capable of hosting different content at different routes in the case of the Survey Platform: there are some custom routes which bypass the MVC framework (e.g. /version ) there are routes to the Client Side application there are routes to MVC controllers (e.g. /api/... ) The above points allow keeping with the single-process design. Users can just run the backend and everything comes up. The backend can be published as a platform binary which can run anywhere the platform ( .NET Core ) runtime is available. It can also be published as a native executable binary for supported platforms (e.g. decsys.exe for Windows).","title":"Backend"},{"location":"technical/stack/#frontend","text":"The Frontend application is a Client Side React Single Page Application. It's pure JavaScript It is however modern ECMAScript, so is transpiled using Babel. It uses a very popular component driven framework: React This should be beneficial for developer accessibility It really helped enable the ability to dynamically load external components It's hosted by the Backend application process.","title":"Frontend"},{"location":"technical/stack/#components","text":"External Response Components are written as React Components, with some additional metadata. Refer to the component-boilerplate wiki for detailed information on the structure of Response Components and how to write them. They're React , the same as the Frontend app. They use Styled Components so they can be bundled into a single JavaScript file, but still be styled. They're modern ECMAScript, using the ES Modules standard They're discovered and served by the Backend app at runtime You can drop new components into the components/ folder locally, and only a page refresh is required to load them. They're loaded by the frontend as ES Modules at runtime. NoSQL allows us to store response data with flexible schema defined by the Response Components, not the Platform. React allows Components to use PropTypes to define Parameter and Response schema that the Platform can validate or interact with (e.g. providing a rich editor UI).","title":"Components"},{"location":"technical/structure-overview/","text":"The Survey Platform Application is a single application designed to run self-contained on an \" Admin \" machine. Once running, the user of the Admin machine can create and configure Surveys , and then launch them. They do this by accessing the running application via a web browser. The data is stored locally on the Admin machine in a lightweight database. Because the application runs a web server, other machines on the same network as the Admin machine can then connect to the machine as Participants , wherein they can take Surveys that have been launched by the Admin . Why a web app? \u00b6 Web applications are a very straightforward way to produce a client/server application (in this case with multiple client Participants accessing one Survey server) using existing standard technology that is well understood. Users are also comfortable using their favourite web browser. This approach allows the Platform to meet its original requirements of running on a local network with multiple Participant devices connecting. It also paves the way for producing an online hostable version of the application that could be used as a multi-user service. In that future scenario, multiple people with accounts could create and manage their own Surveys as Admins , and could invite Participants to complete them. Why all in a single process? \u00b6 Although this is a web application with a database, and separate server and client parts, it is all currently run in a single process: You just run the one application and everything else is taken care of. This approach aids in the original intended local use of the Platform - on one physical Admin machine on a local network only. It means an easy zero-configuration approach to getting started making and running Surveys . For future use in a hosted online service environment, it will be desirable to split up some parts of the application into separate processes - for example connecting to a separate database server instead of storing the data locally. It is intended to achieve this as an optional approach, to retain the best of both worlds for use in either scenario.","title":"Structure Overview"},{"location":"technical/structure-overview/#why-a-web-app","text":"Web applications are a very straightforward way to produce a client/server application (in this case with multiple client Participants accessing one Survey server) using existing standard technology that is well understood. Users are also comfortable using their favourite web browser. This approach allows the Platform to meet its original requirements of running on a local network with multiple Participant devices connecting. It also paves the way for producing an online hostable version of the application that could be used as a multi-user service. In that future scenario, multiple people with accounts could create and manage their own Surveys as Admins , and could invite Participants to complete them.","title":"Why a web app?"},{"location":"technical/structure-overview/#why-all-in-a-single-process","text":"Although this is a web application with a database, and separate server and client parts, it is all currently run in a single process: You just run the one application and everything else is taken care of. This approach aids in the original intended local use of the Platform - on one physical Admin machine on a local network only. It means an easy zero-configuration approach to getting started making and running Surveys . For future use in a hosted online service environment, it will be desirable to split up some parts of the application into separate processes - for example connecting to a separate database server instead of storing the data locally. It is intended to achieve this as an optional approach, to retain the best of both worlds for use in either scenario.","title":"Why all in a single process?"}]}